//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Flying"",
            ""id"": ""d34a87c2-87b7-49eb-9001-c144adcd0cb1"",
            ""actions"": [
                {
                    ""name"": ""RFly"",
                    ""type"": ""Value"",
                    ""id"": ""a86db424-4e9a-44ab-88d6-3b376bd67cb7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""b2cee6c3-6467-412a-8e7e-baa10330f6d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LFly"",
                    ""type"": ""Value"",
                    ""id"": ""62bd8231-fa26-4de2-ac16-68ecf62e3b48"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""1f1c0f2a-e57c-4f16-9200-2deb9a7f9284"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4e2b5a6-fd8f-4c42-a753-6f3e4c831925"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RFly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e9434b9-e2eb-449f-a464-a5ae24936846"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dab2dc38-2012-453d-a3ed-9527a3e0affc"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LFly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9e36eeb-f3b2-4630-ab76-f9fae5497f8b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ODM"",
            ""id"": ""664779bf-4cd5-4845-b550-a85d951bcbd0"",
            ""actions"": [
                {
                    ""name"": ""RGrapple"",
                    ""type"": ""Button"",
                    ""id"": ""9197dc42-3c41-489c-99f3-f1b8f56171b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LGrapple"",
                    ""type"": ""Button"",
                    ""id"": ""6e5dc43f-94f1-41ab-b02c-7a29f58e0067"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""d2b67ad7-f3b1-47a9-ac72-e94f8dd321e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RPull"",
                    ""type"": ""Value"",
                    ""id"": ""21a86902-41ab-47b9-9613-65f7164653ba"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LPull"",
                    ""type"": ""Value"",
                    ""id"": ""e510cb4b-8711-49c6-8b9e-f62308802ed2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TestMove"",
                    ""type"": ""Button"",
                    ""id"": ""7cc61ec3-4d92-4d9f-9fe5-99a327eb9db5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ccbdcd1-22bb-4060-874a-99cd6b077406"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f32af1b2-21c4-4151-8d04-bdd9d13ca604"",
                    ""path"": ""<XRController>{LeftHand}/gripButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f875dbbf-662c-4f44-8d02-34e593db3587"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""554efd5b-f0a3-49cf-8c99-af7a71314a4e"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RPull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d63d297-1698-4045-91b7-0bb6e211ffb2"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LPull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91456018-9ec4-46a2-a176-a68a19195328"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""1dc71342-8c52-4281-9f91-5b559d2b3437"",
            ""actions"": [
                {
                    ""name"": ""ToggleCars"",
                    ""type"": ""Button"",
                    ""id"": ""2c51386d-f675-4856-9669-dfd47ac864f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleText"",
                    ""type"": ""Button"",
                    ""id"": ""5e3aafc6-b2d8-4964-921a-17c79fa71e1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IncreaseVelocity"",
                    ""type"": ""Button"",
                    ""id"": ""db2402e3-b35e-438d-b6b9-1aa716420eab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecreaseVelocity"",
                    ""type"": ""Button"",
                    ""id"": ""0ce78f2d-e07b-42fa-84bf-728ef2d3e013"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81def1e4-c0f8-46db-8cf0-c2cff08788ed"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleCars"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dfef8dd-6c8c-4b15-9b62-2dbba323cd52"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleText"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06b681dc-6411-4a83-b16f-c3a16f1c200a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""109bea9f-7114-400a-820d-8479bb475334"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecreaseVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Flying
        m_Flying = asset.FindActionMap("Flying", throwIfNotFound: true);
        m_Flying_RFly = m_Flying.FindAction("RFly", throwIfNotFound: true);
        m_Flying_Grip = m_Flying.FindAction("Grip", throwIfNotFound: true);
        m_Flying_LFly = m_Flying.FindAction("LFly", throwIfNotFound: true);
        m_Flying_Pause = m_Flying.FindAction("Pause", throwIfNotFound: true);
        // ODM
        m_ODM = asset.FindActionMap("ODM", throwIfNotFound: true);
        m_ODM_RGrapple = m_ODM.FindAction("RGrapple", throwIfNotFound: true);
        m_ODM_LGrapple = m_ODM.FindAction("LGrapple", throwIfNotFound: true);
        m_ODM_Pause = m_ODM.FindAction("Pause", throwIfNotFound: true);
        m_ODM_RPull = m_ODM.FindAction("RPull", throwIfNotFound: true);
        m_ODM_LPull = m_ODM.FindAction("LPull", throwIfNotFound: true);
        m_ODM_TestMove = m_ODM.FindAction("TestMove", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_ToggleCars = m_Debug.FindAction("ToggleCars", throwIfNotFound: true);
        m_Debug_ToggleText = m_Debug.FindAction("ToggleText", throwIfNotFound: true);
        m_Debug_IncreaseVelocity = m_Debug.FindAction("IncreaseVelocity", throwIfNotFound: true);
        m_Debug_DecreaseVelocity = m_Debug.FindAction("DecreaseVelocity", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Flying
    private readonly InputActionMap m_Flying;
    private IFlyingActions m_FlyingActionsCallbackInterface;
    private readonly InputAction m_Flying_RFly;
    private readonly InputAction m_Flying_Grip;
    private readonly InputAction m_Flying_LFly;
    private readonly InputAction m_Flying_Pause;
    public struct FlyingActions
    {
        private @InputManager m_Wrapper;
        public FlyingActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @RFly => m_Wrapper.m_Flying_RFly;
        public InputAction @Grip => m_Wrapper.m_Flying_Grip;
        public InputAction @LFly => m_Wrapper.m_Flying_LFly;
        public InputAction @Pause => m_Wrapper.m_Flying_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Flying; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlyingActions set) { return set.Get(); }
        public void SetCallbacks(IFlyingActions instance)
        {
            if (m_Wrapper.m_FlyingActionsCallbackInterface != null)
            {
                @RFly.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnRFly;
                @RFly.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnRFly;
                @RFly.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnRFly;
                @Grip.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnGrip;
                @Grip.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnGrip;
                @Grip.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnGrip;
                @LFly.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnLFly;
                @LFly.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnLFly;
                @LFly.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnLFly;
                @Pause.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_FlyingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RFly.started += instance.OnRFly;
                @RFly.performed += instance.OnRFly;
                @RFly.canceled += instance.OnRFly;
                @Grip.started += instance.OnGrip;
                @Grip.performed += instance.OnGrip;
                @Grip.canceled += instance.OnGrip;
                @LFly.started += instance.OnLFly;
                @LFly.performed += instance.OnLFly;
                @LFly.canceled += instance.OnLFly;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public FlyingActions @Flying => new FlyingActions(this);

    // ODM
    private readonly InputActionMap m_ODM;
    private IODMActions m_ODMActionsCallbackInterface;
    private readonly InputAction m_ODM_RGrapple;
    private readonly InputAction m_ODM_LGrapple;
    private readonly InputAction m_ODM_Pause;
    private readonly InputAction m_ODM_RPull;
    private readonly InputAction m_ODM_LPull;
    private readonly InputAction m_ODM_TestMove;
    public struct ODMActions
    {
        private @InputManager m_Wrapper;
        public ODMActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @RGrapple => m_Wrapper.m_ODM_RGrapple;
        public InputAction @LGrapple => m_Wrapper.m_ODM_LGrapple;
        public InputAction @Pause => m_Wrapper.m_ODM_Pause;
        public InputAction @RPull => m_Wrapper.m_ODM_RPull;
        public InputAction @LPull => m_Wrapper.m_ODM_LPull;
        public InputAction @TestMove => m_Wrapper.m_ODM_TestMove;
        public InputActionMap Get() { return m_Wrapper.m_ODM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ODMActions set) { return set.Get(); }
        public void SetCallbacks(IODMActions instance)
        {
            if (m_Wrapper.m_ODMActionsCallbackInterface != null)
            {
                @RGrapple.started -= m_Wrapper.m_ODMActionsCallbackInterface.OnRGrapple;
                @RGrapple.performed -= m_Wrapper.m_ODMActionsCallbackInterface.OnRGrapple;
                @RGrapple.canceled -= m_Wrapper.m_ODMActionsCallbackInterface.OnRGrapple;
                @LGrapple.started -= m_Wrapper.m_ODMActionsCallbackInterface.OnLGrapple;
                @LGrapple.performed -= m_Wrapper.m_ODMActionsCallbackInterface.OnLGrapple;
                @LGrapple.canceled -= m_Wrapper.m_ODMActionsCallbackInterface.OnLGrapple;
                @Pause.started -= m_Wrapper.m_ODMActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ODMActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ODMActionsCallbackInterface.OnPause;
                @RPull.started -= m_Wrapper.m_ODMActionsCallbackInterface.OnRPull;
                @RPull.performed -= m_Wrapper.m_ODMActionsCallbackInterface.OnRPull;
                @RPull.canceled -= m_Wrapper.m_ODMActionsCallbackInterface.OnRPull;
                @LPull.started -= m_Wrapper.m_ODMActionsCallbackInterface.OnLPull;
                @LPull.performed -= m_Wrapper.m_ODMActionsCallbackInterface.OnLPull;
                @LPull.canceled -= m_Wrapper.m_ODMActionsCallbackInterface.OnLPull;
                @TestMove.started -= m_Wrapper.m_ODMActionsCallbackInterface.OnTestMove;
                @TestMove.performed -= m_Wrapper.m_ODMActionsCallbackInterface.OnTestMove;
                @TestMove.canceled -= m_Wrapper.m_ODMActionsCallbackInterface.OnTestMove;
            }
            m_Wrapper.m_ODMActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RGrapple.started += instance.OnRGrapple;
                @RGrapple.performed += instance.OnRGrapple;
                @RGrapple.canceled += instance.OnRGrapple;
                @LGrapple.started += instance.OnLGrapple;
                @LGrapple.performed += instance.OnLGrapple;
                @LGrapple.canceled += instance.OnLGrapple;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @RPull.started += instance.OnRPull;
                @RPull.performed += instance.OnRPull;
                @RPull.canceled += instance.OnRPull;
                @LPull.started += instance.OnLPull;
                @LPull.performed += instance.OnLPull;
                @LPull.canceled += instance.OnLPull;
                @TestMove.started += instance.OnTestMove;
                @TestMove.performed += instance.OnTestMove;
                @TestMove.canceled += instance.OnTestMove;
            }
        }
    }
    public ODMActions @ODM => new ODMActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_Debug_ToggleCars;
    private readonly InputAction m_Debug_ToggleText;
    private readonly InputAction m_Debug_IncreaseVelocity;
    private readonly InputAction m_Debug_DecreaseVelocity;
    public struct DebugActions
    {
        private @InputManager m_Wrapper;
        public DebugActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleCars => m_Wrapper.m_Debug_ToggleCars;
        public InputAction @ToggleText => m_Wrapper.m_Debug_ToggleText;
        public InputAction @IncreaseVelocity => m_Wrapper.m_Debug_IncreaseVelocity;
        public InputAction @DecreaseVelocity => m_Wrapper.m_Debug_DecreaseVelocity;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @ToggleCars.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnToggleCars;
                @ToggleCars.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnToggleCars;
                @ToggleCars.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnToggleCars;
                @ToggleText.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnToggleText;
                @ToggleText.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnToggleText;
                @ToggleText.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnToggleText;
                @IncreaseVelocity.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnIncreaseVelocity;
                @IncreaseVelocity.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnIncreaseVelocity;
                @IncreaseVelocity.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnIncreaseVelocity;
                @DecreaseVelocity.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnDecreaseVelocity;
                @DecreaseVelocity.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnDecreaseVelocity;
                @DecreaseVelocity.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnDecreaseVelocity;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleCars.started += instance.OnToggleCars;
                @ToggleCars.performed += instance.OnToggleCars;
                @ToggleCars.canceled += instance.OnToggleCars;
                @ToggleText.started += instance.OnToggleText;
                @ToggleText.performed += instance.OnToggleText;
                @ToggleText.canceled += instance.OnToggleText;
                @IncreaseVelocity.started += instance.OnIncreaseVelocity;
                @IncreaseVelocity.performed += instance.OnIncreaseVelocity;
                @IncreaseVelocity.canceled += instance.OnIncreaseVelocity;
                @DecreaseVelocity.started += instance.OnDecreaseVelocity;
                @DecreaseVelocity.performed += instance.OnDecreaseVelocity;
                @DecreaseVelocity.canceled += instance.OnDecreaseVelocity;
            }
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IFlyingActions
    {
        void OnRFly(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnLFly(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IODMActions
    {
        void OnRGrapple(InputAction.CallbackContext context);
        void OnLGrapple(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnRPull(InputAction.CallbackContext context);
        void OnLPull(InputAction.CallbackContext context);
        void OnTestMove(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnToggleCars(InputAction.CallbackContext context);
        void OnToggleText(InputAction.CallbackContext context);
        void OnIncreaseVelocity(InputAction.CallbackContext context);
        void OnDecreaseVelocity(InputAction.CallbackContext context);
    }
}
