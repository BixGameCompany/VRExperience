//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Flying"",
            ""id"": ""d34a87c2-87b7-49eb-9001-c144adcd0cb1"",
            ""actions"": [
                {
                    ""name"": ""RFly"",
                    ""type"": ""Value"",
                    ""id"": ""a86db424-4e9a-44ab-88d6-3b376bd67cb7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""b2cee6c3-6467-412a-8e7e-baa10330f6d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LFly"",
                    ""type"": ""Value"",
                    ""id"": ""62bd8231-fa26-4de2-ac16-68ecf62e3b48"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""1f1c0f2a-e57c-4f16-9200-2deb9a7f9284"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4e2b5a6-fd8f-4c42-a753-6f3e4c831925"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RFly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e9434b9-e2eb-449f-a464-a5ae24936846"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dab2dc38-2012-453d-a3ed-9527a3e0affc"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LFly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9e36eeb-f3b2-4630-ab76-f9fae5497f8b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Flying
        m_Flying = asset.FindActionMap("Flying", throwIfNotFound: true);
        m_Flying_RFly = m_Flying.FindAction("RFly", throwIfNotFound: true);
        m_Flying_Grip = m_Flying.FindAction("Grip", throwIfNotFound: true);
        m_Flying_LFly = m_Flying.FindAction("LFly", throwIfNotFound: true);
        m_Flying_Pause = m_Flying.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Flying
    private readonly InputActionMap m_Flying;
    private IFlyingActions m_FlyingActionsCallbackInterface;
    private readonly InputAction m_Flying_RFly;
    private readonly InputAction m_Flying_Grip;
    private readonly InputAction m_Flying_LFly;
    private readonly InputAction m_Flying_Pause;
    public struct FlyingActions
    {
        private @InputManager m_Wrapper;
        public FlyingActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @RFly => m_Wrapper.m_Flying_RFly;
        public InputAction @Grip => m_Wrapper.m_Flying_Grip;
        public InputAction @LFly => m_Wrapper.m_Flying_LFly;
        public InputAction @Pause => m_Wrapper.m_Flying_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Flying; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlyingActions set) { return set.Get(); }
        public void SetCallbacks(IFlyingActions instance)
        {
            if (m_Wrapper.m_FlyingActionsCallbackInterface != null)
            {
                @RFly.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnRFly;
                @RFly.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnRFly;
                @RFly.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnRFly;
                @Grip.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnGrip;
                @Grip.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnGrip;
                @Grip.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnGrip;
                @LFly.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnLFly;
                @LFly.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnLFly;
                @LFly.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnLFly;
                @Pause.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_FlyingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RFly.started += instance.OnRFly;
                @RFly.performed += instance.OnRFly;
                @RFly.canceled += instance.OnRFly;
                @Grip.started += instance.OnGrip;
                @Grip.performed += instance.OnGrip;
                @Grip.canceled += instance.OnGrip;
                @LFly.started += instance.OnLFly;
                @LFly.performed += instance.OnLFly;
                @LFly.canceled += instance.OnLFly;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public FlyingActions @Flying => new FlyingActions(this);
    public interface IFlyingActions
    {
        void OnRFly(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnLFly(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
